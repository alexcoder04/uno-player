# -*- coding: utf-8 -*-
"""classify_test1.ipynb

Automatically generated by Colaboratory.
"""

# https://www.youtube.com/watch?v=iGWbqhdjf2s
import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout
from keras import layers
from tensorflow.keras.utils import to_categorical
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

from keras.datasets import cifar10
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

print(type(x_train), type(x_test))
print(type(y_train), type(y_test))

print(x_train.shape, x_test.shape)
print(y_train.shape, y_test.shape)

i = 0
x_train[i]

img = plt.imshow(x_train[i])

print(y_train[i])

classification = ["airplane", "auto", "bird", "cat", "deer", "dog", "frog", "horse", "ship", "truck"]
print(classification[y_train[i][0]])

y_train_one_hot = to_categorical(y_train)
y_test_one_hot = to_categorical(y_test)

print(y_train_one_hot)

print(y_train_one_hot[i])

x_train = x_train / 255
x_test = x_test / 255

print(x_train[i])

# ACTUAL NEURAL NETWORK
model = Sequential()

model.add( Conv2D(32, (5, 5), activation="relu", input_shape=(32,32,3)) )

model.add( MaxPooling2D(pool_size=(2,2)) )

model.add( Conv2D(32, (5, 5), activation="relu") )

model.add( MaxPooling2D(pool_size=(2,2)) )

model.add( Flatten() )

model.add( Dense(1000, activation="relu") )

model.add( Dropout(0.5) )

model.add( Dense(500, activation="relu") )

model.add( Dropout(0.5) )

model.add( Dense(250, activation="relu") )

model.add( Dense(10, activation="softmax") )

model.compile(loss="categorical_crossentropy", optimizer="adam", metrics=["accuracy"])

hist = model.fit(x_train, y_train_one_hot, batch_size=256, epochs=10, validation_split=0.2)

# second value is accuracy
model.evaluate(x_test, y_test_one_hot)

plt.plot(hist.history["accuracy"])
plt.plot(hist.history["val_accuracy"])
plt.title("Model accuracy")
plt.ylabel("Accuracy")
plt.xlabel("Epoch")
plt.legend(["Train", "Val"], loc="upper left")
plt.show()

plt.plot(hist.history["loss"])
plt.plot(hist.history["val_loss"])
plt.title("Model loss")
plt.ylabel("Loss")
plt.xlabel("Epoch")
plt.legend(["Train", "Val"], loc="upper right")
plt.show()

# example
from google.colab import files
uploaded = files.upload()
new_img = plt.imread("ship.jpg")
from skimage.transform import resize
resized_img = resize(new_img, (32, 32, 3))
img = plt.imshow(resized_img)

predictions = model.predict(np.array([resized_img]))
print(predictions)

index = np.where(predictions[0] == np.amax(predictions[0]))[0][0]
print(classification[index])

# now: own images
# https://www.youtube.com/watch?v=loq7ZuZ8ZOErE
